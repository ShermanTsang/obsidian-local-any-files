import { EXTENSION_PRESETS } from "src/config";
export class SettingsValidator {
    static validateSettings(settings) {
        const errors = [];
        // Validate tasks
        if (!settings.tasks || settings.tasks.length === 0) {
            errors.push('At least one task must be selected.');
        }
        // Validate extensions
        const allExtensions = this.getAllExtensions(settings);
        if (allExtensions.length === 0) {
            errors.push('At least one file extension must be selected or added.');
        }
        // Validate extension format
        const invalidExtensions = allExtensions.filter(ext => !this.isValidExtension(ext));
        if (invalidExtensions.length > 0) {
            errors.push(`Invalid extension format: ${invalidExtensions.join(', ')}. Extensions must start with a dot and contain only valid characters.`);
        }
        // Validate scope
        if (!['currentFile', 'allFiles', 'currentFolder'].includes(settings.scope)) {
            errors.push('Invalid scope selected.');
        }
        return {
            isValid: errors.length === 0,
            errors
        };
    }
    static getAllExtensions(settings) {
        // Get actual extensions from presets
        const presetExtensions = (settings.presetExtensions || [])
            .flatMap(presetKey => EXTENSION_PRESETS[presetKey] || []);
        const customExtensions = settings.customExtensions || [];
        // Combine and remove duplicates
        return [...new Set([...presetExtensions, ...customExtensions])];
    }
    static isValidExtension(extension) {
        return /^\.[a-zA-Z0-9]+$/.test(extension);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MtdmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2V0dGluZ3MtdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQU8vQyxNQUFNLE9BQU8saUJBQWlCO0lBQzFCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFrQztRQUN0RCxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7UUFFNUIsaUJBQWlCO1FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNoRCxNQUFNLENBQUMsSUFBSSxDQUFDLHFDQUFxQyxDQUFDLENBQUM7U0FDdEQ7UUFFRCxzQkFBc0I7UUFDdEIsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RELElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyx3REFBd0QsQ0FBQyxDQUFDO1NBQ3pFO1FBRUQsNEJBQTRCO1FBQzVCLE1BQU0saUJBQWlCLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkYsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsdUVBQXVFLENBQUMsQ0FBQztTQUNqSjtRQUVELGlCQUFpQjtRQUNqQixJQUFJLENBQUMsQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLGVBQWUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEUsTUFBTSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1NBQzFDO1FBRUQsT0FBTztZQUNILE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDNUIsTUFBTTtTQUNULENBQUM7SUFDTixDQUFDO0lBRU8sTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQWtDO1FBQzlELHFDQUFxQztRQUNyQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsUUFBUSxDQUFDLGdCQUFnQixJQUFJLEVBQUUsQ0FBQzthQUNyRCxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUU5RCxNQUFNLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsSUFBSSxFQUFFLENBQUM7UUFFekQsZ0NBQWdDO1FBQ2hDLE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxnQkFBZ0IsRUFBRSxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFTyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBaUI7UUFDN0MsT0FBTyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRVhURU5TSU9OX1BSRVNFVFMgfSBmcm9tIFwic3JjL2NvbmZpZ1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25SZXN1bHQge1xuICAgIGlzVmFsaWQ6IGJvb2xlYW47XG4gICAgZXJyb3JzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzVmFsaWRhdG9yIHtcbiAgICBzdGF0aWMgdmFsaWRhdGVTZXR0aW5ncyhzZXR0aW5nczogTG9jYWxBdHRhY2htZW50c1NldHRpbmdzKTogVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcblxuICAgICAgICAvLyBWYWxpZGF0ZSB0YXNrc1xuICAgICAgICBpZiAoIXNldHRpbmdzLnRhc2tzIHx8IHNldHRpbmdzLnRhc2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goJ0F0IGxlYXN0IG9uZSB0YXNrIG11c3QgYmUgc2VsZWN0ZWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWYWxpZGF0ZSBleHRlbnNpb25zXG4gICAgICAgIGNvbnN0IGFsbEV4dGVuc2lvbnMgPSB0aGlzLmdldEFsbEV4dGVuc2lvbnMoc2V0dGluZ3MpO1xuICAgICAgICBpZiAoYWxsRXh0ZW5zaW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKCdBdCBsZWFzdCBvbmUgZmlsZSBleHRlbnNpb24gbXVzdCBiZSBzZWxlY3RlZCBvciBhZGRlZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhbGlkYXRlIGV4dGVuc2lvbiBmb3JtYXRcbiAgICAgICAgY29uc3QgaW52YWxpZEV4dGVuc2lvbnMgPSBhbGxFeHRlbnNpb25zLmZpbHRlcihleHQgPT4gIXRoaXMuaXNWYWxpZEV4dGVuc2lvbihleHQpKTtcbiAgICAgICAgaWYgKGludmFsaWRFeHRlbnNpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKGBJbnZhbGlkIGV4dGVuc2lvbiBmb3JtYXQ6ICR7aW52YWxpZEV4dGVuc2lvbnMuam9pbignLCAnKX0uIEV4dGVuc2lvbnMgbXVzdCBzdGFydCB3aXRoIGEgZG90IGFuZCBjb250YWluIG9ubHkgdmFsaWQgY2hhcmFjdGVycy5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhbGlkYXRlIHNjb3BlXG4gICAgICAgIGlmICghWydjdXJyZW50RmlsZScsICdhbGxGaWxlcycsICdjdXJyZW50Rm9sZGVyJ10uaW5jbHVkZXMoc2V0dGluZ3Muc2NvcGUpKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaCgnSW52YWxpZCBzY29wZSBzZWxlY3RlZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc1ZhbGlkOiBlcnJvcnMubGVuZ3RoID09PSAwLFxuICAgICAgICAgICAgZXJyb3JzXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0QWxsRXh0ZW5zaW9ucyhzZXR0aW5nczogTG9jYWxBdHRhY2htZW50c1NldHRpbmdzKTogc3RyaW5nW10ge1xuICAgICAgICAvLyBHZXQgYWN0dWFsIGV4dGVuc2lvbnMgZnJvbSBwcmVzZXRzXG4gICAgICAgIGNvbnN0IHByZXNldEV4dGVuc2lvbnMgPSAoc2V0dGluZ3MucHJlc2V0RXh0ZW5zaW9ucyB8fCBbXSlcbiAgICAgICAgICAgIC5mbGF0TWFwKHByZXNldEtleSA9PiBFWFRFTlNJT05fUFJFU0VUU1twcmVzZXRLZXldIHx8IFtdKTtcbiAgICAgICAgICAgIFxuICAgICAgICBjb25zdCBjdXN0b21FeHRlbnNpb25zID0gc2V0dGluZ3MuY3VzdG9tRXh0ZW5zaW9ucyB8fCBbXTtcbiAgICAgICAgXG4gICAgICAgIC8vIENvbWJpbmUgYW5kIHJlbW92ZSBkdXBsaWNhdGVzXG4gICAgICAgIHJldHVybiBbLi4ubmV3IFNldChbLi4ucHJlc2V0RXh0ZW5zaW9ucywgLi4uY3VzdG9tRXh0ZW5zaW9uc10pXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBpc1ZhbGlkRXh0ZW5zaW9uKGV4dGVuc2lvbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAvXlxcLlthLXpBLVowLTldKyQvLnRlc3QoZXh0ZW5zaW9uKTtcbiAgICB9XG59XG4iXX0=